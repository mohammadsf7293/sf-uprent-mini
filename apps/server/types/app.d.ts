// Generated by dts-bundle-generator v9.5.1

declare const app: import("elysia").default<"", false, {
	decorator: {
		db: import("bun:sqlite").Database;
	};
	store: {};
	derive: {};
	resolve: {};
}, {
	type: {};
	error: {};
}, {
	schema: {};
	macro: {};
}, {
	feed: {
		properties: {
			post: {
				body: {
					page: number;
				};
				params: Record<never, string>;
				query: unknown;
				headers: unknown;
				response: {
					200: {
						status: "success";
						payload: {
							properties: {
								id: number;
								sourceURL: string;
								title: string;
								cityName: string;
								price: number | null;
								area: number | null;
								previewImageURL: string;
							}[];
							hasMore: boolean;
						};
					};
				} | {
					200: {
						status: "error";
						message: string;
					};
				};
			};
		};
	};
} & {
	commute: {
		durations: {
			post: {
				body: {
					addresses: string[];
				};
				params: Record<never, string>;
				query: unknown;
				headers: unknown;
				response: {
					200: {
						status: "success";
						payload: {
							durations: {
								[x: string]: {
									walking: number | null;
									driving: number | null;
									transit: number | null;
									biking: number | null;
								};
							};
						};
					};
				} | {
					200: {
						status: "error";
						message: string;
					};
				};
			};
		};
	};
}, {
	derive: {};
	resolve: {};
	schema: {};
}, {
	derive: {};
	resolve: {};
	schema: {};
}>;

export {
	app as default,
};

export {};

interface Schema {
	type: string;
	properties?: Record<string, unknown>;
	items?: unknown;
	required?: string[];
	additionalProperties?: boolean;
	patternProperties?: Record<string, unknown>;
	oneOf?: unknown[];
	anyOf?: unknown[];
	allOf?: unknown[];
	not?: unknown;
	if?: unknown;
	then?: unknown;
	else?: unknown;
	dependencies?: Record<string, unknown>;
	propertyNames?: unknown;
	const?: unknown;
	enum?: unknown[];
	format?: string;
	contentEncoding?: string;
	contentMediaType?: string;
	title?: string;
	description?: string;
	default?: unknown;
	examples?: unknown[];
	readOnly?: boolean;
	writeOnly?: boolean;
	deprecated?: boolean;
	discriminator?: {
		propertyName: string;
		mapping?: Record<string, string>;
	};
	xml?: {
		name?: string;
		namespace?: string;
		prefix?: string;
		attribute?: boolean;
		wrapped?: boolean;
	};
	externalDocs?: {
		description?: string;
		url: string;
	};
}
